# TextMate grammar manual: https://macromates.com/manual/en/language_grammars
# TextMate grammar guide: https://www.apeth.com/nonblog/stories/textmatebundle.html
# VS Code syntax highlight guide: https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
# Use the command-line tool to convert the yaml grammar to json
# npx js-yaml syntaxes/mcil.tmLanguage.yaml > syntaxes/mcil.tmLanguage.json
---
$schema: "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"

name: mcil
scopeName: source.mcil
fileTypes: [mcil]

patterns:
- include: '#command'
- include: '#reserved'
- include: '#keyword'
- include: '#sort'
- include: '#spec_constant'
- include: '#symbol'
- include: '#comment'

repository:
  command:
    patterns:
    - match: '\b(set-logic|declare-sort|define-sort|declare-fun|define-fun|declare-const|define-const|declare-datatype|assert)\b'
      captures:
        '1': {name: keyword.other.mcil}
    - match: '\b(define-system|check-system|declare-enum-sort)\b'
      captures:
        '1': {name: keyword.other.mcil}

    - comment: mcil functions
    - match: '\b(Deadlock|OnlyChange)\b'
      captures:
        '1': {name: support.function.mcil}


    - comment: Propositional and =
    - match: '(\b(true|false|and|or|ite|not)\b)|((=>|=)\s)'
      captures:
        '1': {name: keyword.control.mcil}

    - comment: Arithmetic
    - match: '[[<=][>=]<>\+\-\*/]\s'
      captures:
        '1': {name: keyword.control.mcil}

  keyword:
    match: ':\b([a-zA-Z~!@$%^&*_\-+=<>.?/]|[a-zA-Z~!@$%^&*_\-+=<>.?/][a-zA-Z0-9~!@$%^&*_\-+=<>.?/]+)\b'
    captures:
      '1': {name: keyword.control.mcil}
  sort:
    patterns:
    - match: '\b([A-Z][a-zA-Z~!@$%^&*_\-+=<>.?/]|[A-Z][a-zA-Z0-9~!@$%^&*_\-+=<>.?/]*)\b'
      captures:
        '1': {name: support.type.mcil}
    - match: '\|\b([A-Z][a-zA-Z~!@$%^&*_\-+=<>.?/]|[A-Z][a-zA-Z0-9~!@$%^&*_\-+=<>.?/]*)\b\|'
      captures:
        '1': {name: support.type.mcil}

  spec_constant:
    patterns:
    - include: '#decimal'
    - include: '#numeral'
    - include: '#hexadecimal'
    - include: '#binary'
    - include: '#string'
    - include: '#b_value'

  symbol:
    patterns:
    - match: '\b([a-zA-Z~!@$%^&*_\-+=<>.?/]|[a-zA-Z~!@$%^&*_\-+=<>.?/][a-zA-Z0-9~!@$%^&*_\-+=<>.?/]+)\b'
      captures:
        '1': {name: variable.other.mcil}
    - begin: '\|'
      end: '\|'
      contentName: variable.other.mcil
  
  comment:
    match: ';.*'
    name: comment.mcil
  decimal:
    match: '\b(\d+\.\d+)\b'
    captures:
      '1': {name: constant.numeric.mcil}
  numeral:
    match: '\b(\d+)\b'
    captures:
      '1': {name: constant.numeric.mcil}
  hexadecimal:
    match: '\s(#x\h+)\b'
    captures:
      '1': {name: constant.numeric.mcil}
  binary:
    match: '\s(#b[01]+)\b'
    captures:
      '1': {name: constant.numeric.mcil}
  string:
    begin: '"'
    end: '"'
    name: string.quoted.double.mcil
    patterns:
    - match: '""'
      name: constant.character.escape.mcil
  b_value:
    match: '\b(true|false)\b'
    captures:
      '1': {name: constant.language.mcil}